apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

apply from: './dokka.gradle'
apply from: '../jacoco.gradle'
apply from: '../constant.gradle'

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    def dependencyGroup = [
            core  : coreDependencies,
            main  : mainDependencies,
            module: moduleDependencies,
            ui    : uiDependencies,
    ]
    dependencyGroup.each { key, dependencies ->
        dependencies.each { key2, dependency ->
            implementation dependency
        }
    }

    testImplementations.each { key, value ->
        if (key.startsWith('android')) {
            androidTestImplementation value
        } else {
            testImplementation value
        }
    }


    kapt "com.github.bumptech.glide:compiler:$dependencyVersion.glide"
    kapt "com.android.databinding:compiler:$android_plugin_version"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.myxlultimate'
                artifactId = 'component'
                version = generateVersionName(project)

                artifact(sourceJar)
            }
            // Creates a Maven publication called “debug”.
//            debug(MavenPublication) {
//                // Applies the component for the debug build variant.
//                from components.debug
//
//                groupId = 'com.myxlultimate'
//                artifactId = 'component-debug'
//                version = componentVersionName
//
//                artifact(sourceJar)
//            }
        }
        repositories {
            maven {
                url = "https://archives.ult.ext.xlaxiata.co.id/repository/maven-releases/"

                credentials {
                    username = System.getenv('NEXUS_USERNAME')
                    password = System.getenv('NEXUS_PASSWORD')
                }
            }
        }
    }
}

static def generateVersionName(Project project) {
    def shortHashCommit = project.hasProperty("rcCommitId") ? project.properties["rcCommitId"] : ""

    if (shortHashCommit != "") shortHashCommit = "-" + shortHashCommit

    return project.artifactVersion + shortHashCommit.trim()
}